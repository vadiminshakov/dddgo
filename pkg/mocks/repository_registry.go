// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	repository "github.com/vadiminshakov/dddgo/repository"
)

// RepositoryRegistry is an autogenerated mock type for the RepositoryRegistry type
type RepositoryRegistry struct {
	mock.Mock
}

// Basket provides a mock function with given fields:
func (_m *RepositoryRegistry) Basket() repository.BasketRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Basket")
	}

	var r0 repository.BasketRepository
	if rf, ok := ret.Get(0).(func() repository.BasketRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.BasketRepository)
		}
	}

	return r0
}

// Items provides a mock function with given fields:
func (_m *RepositoryRegistry) Items() repository.ItemsRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Items")
	}

	var r0 repository.ItemsRepository
	if rf, ok := ret.Get(0).(func() repository.ItemsRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.ItemsRepository)
		}
	}

	return r0
}

// Outbox provides a mock function with given fields:
func (_m *RepositoryRegistry) Outbox() repository.Outbox {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Outbox")
	}

	var r0 repository.Outbox
	if rf, ok := ret.Get(0).(func() repository.Outbox); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Outbox)
		}
	}

	return r0
}

// Transaction provides a mock function with given fields: ctx, fn
func (_m *RepositoryRegistry) Transaction(ctx context.Context, fn func(repository.RepositoryRegistry) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(repository.RepositoryRegistry) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TxManager provides a mock function with given fields:
func (_m *RepositoryRegistry) TxManager() repository.TxManagerRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TxManager")
	}

	var r0 repository.TxManagerRepository
	if rf, ok := ret.Get(0).(func() repository.TxManagerRepository); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(repository.TxManagerRepository)
	}

	return r0
}

// NewRepositoryRegistry creates a new instance of RepositoryRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryRegistry {
	mock := &RepositoryRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
