// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	aggregates "github.com/vadiminshakov/dddgo/core/domain/aggregates"
)

// BasketRepository is an autogenerated mock type for the BasketRepository type
type BasketRepository struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: id
func (_m *BasketRepository) GetByID(id int64) (*aggregates.Basket, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *aggregates.Basket
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*aggregates.Basket, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *aggregates.Basket); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregates.Basket)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: basket
func (_m *BasketRepository) Save(basket *aggregates.Basket) error {
	ret := _m.Called(basket)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*aggregates.Basket) error); ok {
		r0 = rf(basket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBasketRepository creates a new instance of BasketRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBasketRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BasketRepository {
	mock := &BasketRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
