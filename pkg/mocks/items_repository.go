// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	vos "github.com/vadiminshakov/dddgo/core/domain/vos"
)

// ItemsRepository is an autogenerated mock type for the ItemsRepository type
type ItemsRepository struct {
	mock.Mock
}

// GetByBasketID provides a mock function with given fields: id
func (_m *ItemsRepository) GetByBasketID(id int64) (*vos.BasketItem, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByBasketID")
	}

	var r0 *vos.BasketItem
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*vos.BasketItem, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *vos.BasketItem); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vos.BasketItem)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: basket
func (_m *ItemsRepository) Save(basket *vos.BasketItem) error {
	ret := _m.Called(basket)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*vos.BasketItem) error); ok {
		r0 = rf(basket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewItemsRepository creates a new instance of ItemsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewItemsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ItemsRepository {
	mock := &ItemsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
